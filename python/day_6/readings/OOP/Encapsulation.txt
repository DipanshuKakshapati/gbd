--OOP--

- a programming paradigm based on the concept of "objects," which can contain data in the form of fields (often known as attributes or properties) and code, in the form of procedures (often known as methods).

1. Encapsulation
- Encapsulation is a fundamental concept in Object-Oriented Programming (OOP) that involves bundling the data (attributes) and the code (methods) that operates on the data into a single unit or class.
- It also restricts direct access to some of an object's components, which can prevent the accidental modification of data.
- Some common access modifiers:

a) Private: Only accessible within the same class.
b) Protected: Accessible within the same class and its subclasses.
c) Public: Accessible from any other class.

# we can use a public method to access or modify the private/protected attributes

a) Private: 
- Private members (attributes or methods) are accessible only within their own class and cannot be accessed from outside the class. 
- They are typically used to hide the internal implementation details of the class to safeguard against unintended use of components, which can help prevent accidental interference with the internal workings of the object.
- Python: Prefix with double underscores __

Example:
class Account:
    def __init__(self):
        self.__balance = 0  # Private attribute

b) Protected:
- Protected members are accessible within their own class and also in subclasses deriving from it.
- This allows these members to be more visible than private ones but still controlled.
- Protected is less restrictive than private but more than public, providing a balance between accessibility and encapsulation.
- Python: Prefix with a single underscore _

Example:
class Account:
    def __init__(self):
        self._balance = 0  # Protected attribute

c) Public:
- Public members are accessible from any part of the program, and any external or derived class can access public fields. 
- Public visibility is used for parts of a class that interact with the external environment or need to be freely accessible without restrictions.
- Python: No prefix is used.

Example:
class Account:
    def __init__(self):
        self.balance = 0  # Public attribute
